package com.example.motorentmobile.view;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.databinding.DataBindingUtil;
import androidx.lifecycle.ViewModelProvider;

import com.bumptech.glide.Glide;
import com.example.motorentmobile.R;
import com.example.motorentmobile.databinding.ActivityAccountBinding;
import com.example.motorentmobile.util.SharedPreferencesHelper;
import com.example.motorentmobile.viewmodel.AccountViewModel;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class AccountActivity extends BaseActivity {

    private ActivityAccountBinding binding;
    private AccountViewModel viewModel;
    private Uri identityCardUri, driverLicenseUri;
    private ProgressBar progressBar;
    private Button btnUpdate;
    private SharedPreferencesHelper prefs;

    @Override
    protected int getLayoutResourceId() {
        return R.layout.activity_account;
    }

    @Override
    protected int getNavigationMenuItemId() {
        return R.id.nav_account;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        prefs = SharedPreferencesHelper.getInstance(this);
        if(!prefs.isLoggedIn()){
            startActivity(new Intent(this, LoginActivity.class));
            finish();
        }
        binding = ActivityAccountBinding.inflate(getLayoutInflater());
        FrameLayout container = findViewById(R.id.container);
        container.addView(binding.getRoot());

        viewModel = new ViewModelProvider(this).get(AccountViewModel.class);


        binding.backBtn.setOnClickListener(v -> {
            // ƒêi·ªÅu h∆∞·ªõng v·ªÅ HomeActivity
            Intent intent = new Intent(AccountActivity.this, HomeActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); // ƒê·∫£m b·∫£o r·∫±ng HomeActivity s·∫Ω ƒë∆∞·ª£c m·ªü l·∫°i
            startActivity(intent);
            finish(); // ƒê√≥ng AccountActivity sau khi chuy·ªÉn ƒë·∫øn HomeActivity
        });

        btnUpdate = binding.btnUpdate; // N√∫t c·∫≠p nh·∫≠t t√†i kho·∫£n

        // Quan s√°t d·ªØ li·ªáu t√†i kho·∫£n
        viewModel.fetchAccountInfo();
        viewModel.getAccount().observe(this, account -> {
            if (account != null) {
                binding.setAccount(account);
                Glide.with(this).load(account.getIdentityCard()).into(binding.ivCCCD);  // Hi·ªÉn th·ªã ·∫£nh CCCD
                Glide.with(this).load(account.getDriverLicense()).into(binding.ivGPLX);  // Hi·ªÉn th·ªã ·∫£nh GPLX
            } else {
                Toast.makeText(this, "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t√†i kho·∫£n", Toast.LENGTH_SHORT).show();
            }
        });
        viewModel.getErrorMessage().observe(this, errorMessage -> {
            if (errorMessage != null) {
                Log.d("AccountActivity", "L·ªñI t·ª´ ViewModel: " + errorMessage);  // üëà Log l·ªói
                Toast.makeText(this, errorMessage, Toast.LENGTH_SHORT).show();
            }
        });

        viewModel.getUpdateSuccess().observe(this, success -> {
            if (success != null) {
                Log.d("AccountActivity", "C·∫≠p nh·∫≠t th√†nh c√¥ng? " + success);  // üëà Log k·∫øt qu·∫£
                if (success) {
                    Toast.makeText(this, "C·∫≠p nh·∫≠t th√†nh c√¥ng", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(this, "C·∫≠p nh·∫≠t th·∫•t b·∫°i", Toast.LENGTH_SHORT).show();
                }
            }
        });



        btnUpdate.setOnClickListener(v -> {
            String email = binding.edtEmail.getText().toString();
            String fullName = binding.edtFullName.getText().toString();
            String phone = binding.edtPhone.getText().toString();


            File cccdFile = null;
            File gplxFile = null;

            try {
                if (identityCardUri != null) {
                    Bitmap cccdBitmap = decodeSampledBitmapFromUri(this, identityCardUri, 500, 500);
                    cccdFile = saveImageToFile(cccdBitmap, "identity_card.jpg");
                }

                if (driverLicenseUri != null) {
                    Bitmap gplxBitmap = decodeSampledBitmapFromUri(this, driverLicenseUri, 500, 500);
                    gplxFile = saveImageToFile(gplxBitmap, "driver_license.jpg");
                }

                // G·ª≠i l√™n ViewModel, cho ph√©p truy·ªÅn null n·∫øu ng∆∞·ªùi d√πng kh√¥ng ch·ªçn ·∫£nh m·ªõi
                viewModel.updateAccountInfo(email, fullName, phone, cccdFile, gplxFile);

            } catch (IOException e) {
                e.printStackTrace();
                Toast.makeText(this, "Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh", Toast.LENGTH_SHORT).show();
            }
        });



        // B·∫•m v√†o ·∫£nh CCCD ƒë·ªÉ ch·ªçn ·∫£nh m·ªõi
        binding.ivCCCD.setOnClickListener(v -> openFilePicker.launch("image/*"));

        // B·∫•m v√†o ·∫£nh GPLX ƒë·ªÉ ch·ªçn ·∫£nh m·ªõi
        binding.ivGPLX.setOnClickListener(v -> openFilePicker.launch("image/*"));
    }

    // X·ª≠ l√Ω ch·ªçn ·∫£nh CCCD v√† GPLX
    private final ActivityResultLauncher<String> openFilePicker = registerForActivityResult(
            new ActivityResultContracts.GetContent(),
            uri -> {
                if (uri != null) {
                    try {
                        Bitmap bitmap = decodeSampledBitmapFromUri(this, uri, 500, 500);
                        if (identityCardUri == null) {
                            identityCardUri = uri;
                            binding.ivCCCD.setImageBitmap(bitmap);
                        } else {
                            driverLicenseUri = uri;
                            binding.ivGPLX.setImageBitmap(bitmap);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Toast.makeText(this, "Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh", Toast.LENGTH_SHORT).show();
                    }
                }
            }
    );
    private File saveImageToFile(Bitmap bitmap, String fileName) {
        File file = new File(getExternalFilesDir(null), fileName);
        try (FileOutputStream fos = new FileOutputStream(file)) {
            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return file;
    }

    /**
     * H√†m gi·∫£m k√≠ch th∆∞·ªõc ·∫£nh tr∆∞·ªõc khi gi·∫£i m√£
     */
    public static Bitmap decodeSampledBitmapFromUri(Context context, Uri uri, int reqWidth, int reqHeight) throws IOException {
        // ƒê·ªçc d·ªØ li·ªáu ·∫£nh v√† t√≠nh to√°n k√≠ch th∆∞·ªõc ·∫£nh th·ª±c t·∫ø
        InputStream input = context.getContentResolver().openInputStream(uri);  // S·ª≠ d·ª•ng context.getContentResolver()
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true; // Ch·ªâ l·∫•y th√¥ng tin v·ªÅ k√≠ch th∆∞·ªõc ·∫£nh m√† kh√¥ng t·∫£i to√†n b·ªô
        BitmapFactory.decodeStream(input, null, options);
        input.close();

        // T√≠nh to√°n t·ª∑ l·ªá ph√π h·ª£p
        int inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

        // Gi·∫£i m√£ ·∫£nh v·ªõi t·ª∑ l·ªá ph√π h·ª£p
        options.inJustDecodeBounds = false;
        options.inSampleSize = inSampleSize;
        input = context.getContentResolver().openInputStream(uri);  // S·ª≠ d·ª•ng context.getContentResolver()
        return BitmapFactory.decodeStream(input, null, options);
    }

    /**
     * T√≠nh to√°n t·ª∑ l·ªá gi·∫£m k√≠ch th∆∞·ªõc ·∫£nh
     */
    public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
        // K√≠ch th∆∞·ªõc ·∫£nh g·ªëc
        final int height = options.outHeight;
        final int width = options.outWidth;

        int inSampleSize = 1;

        if (height > reqHeight || width > reqWidth) {
            // T√≠nh to√°n t·ª∑ l·ªá ph√π h·ª£p
            final int halfHeight = height / 2;
            final int halfWidth = width / 2;

            // Ki·ªÉm tra t·ª∑ l·ªá nh·ªè nh·∫•t
            while ((halfHeight / inSampleSize) >= reqHeight && (halfWidth / inSampleSize) >= reqWidth) {
                inSampleSize *= 2;
            }
        }
        return inSampleSize;
    }
}
